from collections.abc import Iterator, Mapping
from typing import Any, Literal

ALL_KEYS: Literal["*"] = "*"

class Model:
    def keys(self, computed: bool = False) -> Literal["*"] | list[str]: ...
    def _get(self, key: str, default: Any = None, raise_: bool = False) -> Any: ...

    get = _get

    def _setitem(self, key: str, value: str) -> bool: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def _type(self, key: str) -> str: ...
    def formatted(
        self,
        included_keys: Literal["*"] | list[str] = "*",
        for_path: bool = False,
    ) -> FormattedMapping: ...

class FormattedMapping(Mapping[str, str]):
    model: Model
    for_path: bool
    def __init__(
        self,
        model: Model,
        included_keys: Literal["*"] | list[str] = "*",
        for_path: bool = False,
    ): ...
    def __getitem__(self, key: str) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
