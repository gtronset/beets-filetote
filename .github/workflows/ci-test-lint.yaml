# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: CI - Test & Lint

permissions:
    contents: read

on:
    push:
    pull_request:
        types: [opened, reopened]

env:
    FFMPEG_VERSION: 7.0.2
    POETRY_VERSION: 1.8.5
    PYTHON_VERSION: 3.13

defaults:
    run:
        shell: bash

jobs:
    test:
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
                os: [ubuntu-latest, windows-latest]

        env:
            TOXENV: ${{ matrix.python-version }}

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Setup FFmpeg Environment Variables
              id: ffmpeg-env-setup
              run: |
                  PATH_SEP="${{ !startsWith(runner.os, 'windows') && '/' || '\\' }}"
                  echo "PATH_SEP=${PATH_SEP}" >> $GITHUB_ENV

                  ffmpeg_dir="${{ github.workspace }}${PATH_SEP}ffmpeg_cache"

                  echo "ffmpeg-cache-path=${ffmpeg_dir}" >> $GITHUB_OUTPUT
                  echo "$ffmpeg_dir" >> $GITHUB_PATH

            - name: Cache FFmpeg
              uses: actions/cache@v4
              with:
                  path: ${{ steps.ffmpeg-env-setup.outputs.ffmpeg-cache-path }}
                  key: ${{ runner.os }}-ffmpeg-${{ env.FFMPEG_VERSION }}

            - name: Install FFmpeg (Ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: |
                  # ffmpeg_linux_version=$(curl -L https://johnvansickle.com/ffmpeg/release-readme.txt 2> /dev/null | grep "version: " | cut -c 24-)
                  ffmpeg_dir="${{ steps.ffmpeg-env-setup.outputs.ffmpeg-cache-path }}"

                  echo "$ffmpeg_dir" >> "$GITHUB_PATH"

                  # Only install if FFmpeg is not available
                  if ! $(ffmpeg -version >/dev/null 2>&1) ; then
                    linux_url='https://johnvansickle.com/ffmpeg/releases/ffmpeg-${{ env.FFMPEG_VERSION }}-amd64-static.tar.xz'

                    temp_ffmpeg_archive="${{ github.workspace }}\temp_ffmpeg_archive.tar.xz"

                    curl -L "$linux_url" -o "$temp_ffmpeg_archive"
                    mkdir "$ffmpeg_dir" || true

                    tar -xf "$temp_ffmpeg_archive" --wildcards -O "**/ffmpeg" > "$ffmpeg_dir/ffmpeg"
                    tar -xf "$temp_ffmpeg_archive" --wildcards -O "**/ffprobe" > "$ffmpeg_dir/ffprobe"
                    tar -xf "$temp_ffmpeg_archive" --wildcards -O "**/GPLv3.txt" > "$ffmpeg_dir/LICENSE"
                    tar -xf "$temp_ffmpeg_archive" --wildcards -O "**/readme.txt" > "$ffmpeg_dir/README.txt"

                    # Ensure these can be executed
                    chmod +x "$ffmpeg_dir/ffmpeg" "$ffmpeg_dir/ffprobe"

                    rm -rf "$temp_ffmpeg_archive"
                  fi

            - name: Install FFmpeg (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  # ffmpeg_win_version=$(curl -L https://www.gyan.dev/ffmpeg/builds/release-version 2> /dev/null | cut -d "-" -f 1)
                  ffmpeg_dir="${{ steps.ffmpeg-env-setup.outputs.ffmpeg-cache-path }}"

                  echo "$ffmpeg_dir" >> "$GITHUB_PATH"

                  # Only install if FFmpeg is not available
                  if ! $(ffmpeg -version >/dev/null 2>&1) ; then
                    win32_url="https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-${{ env.FFMPEG_VERSION }}-full_build.7z"
                    temp_ffmpeg_archive="${{ github.workspace }}\temp_ffmpeg_archive.7z"

                    curl -L "$win32_url" -o "$temp_ffmpeg_archive"
                    mkdir "$ffmpeg_dir" || true

                    7z e "$temp_ffmpeg_archive" "-o$ffmpeg_dir" "**\bin\ffmpeg.exe" \
                        "**\bin\ffprobe.exe" "**\LICENSE" "**\README.txt"

                    rm -rf "$temp_ffmpeg_archive"
                  fi

            - name: Setup Pipx Environment Variables
              id: pipx-env-setup
              run: |
                  PATH_SEP="${{ !startsWith(runner.os, 'windows') && '/' || '\\' }}"
                  echo "PATH_SEP=${PATH_SEP}" >> $GITHUB_ENV

                  PIPX_CACHE="${{ github.workspace }}${PATH_SEP}pipx_cache"
                  echo "pipx-cache-path=${PIPX_CACHE}" >> $GITHUB_OUTPUT
                  echo "pipx-version=$(pipx --version)" >> $GITHUB_OUTPUT
                  echo "PIPX_HOME=${PIPX_CACHE}${PATH_SEP}home" >> $GITHUB_ENV
                  echo "PIPX_BIN_DIR=${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_ENV
                  echo "PIPX_MAN_DIR=${PIPX_CACHE}${PATH_SEP}man" >> $GITHUB_ENV
                  echo "${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_PATH

            - name: Cache Pipx
              id: cache-pipx
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pipx-env-setup.outputs.pipx-cache-path }}
                  key: ${{ runner.os }}-python_${{ env.PYTHON_VERSION }}-pipx_${{ steps.pipx-env-setup.outputs.pipx-version }}-poetry_${{ env.POETRY_VERSION }}

            - name: Install Poetry & Tox
              if: steps.cache-pipx.outputs.cache-hit != 'true'
              run: |
                  pipx install poetry==${{ env.POETRY_VERSION }}

            - name: Setup Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: poetry

            - name: Install poetry Dependencies
              run: poetry install

            - name: Run Tests
              run: poetry run pytest

    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Pipx Environment Variables
              id: pipx-env-setup
              run: |
                  PATH_SEP="${{ !startsWith(runner.os, 'windows') && '/' || '\\' }}"

                  PIPX_CACHE="${{ github.workspace }}${PATH_SEP}pipx_cache"
                  echo "pipx-cache-path=${PIPX_CACHE}" >> $GITHUB_OUTPUT
                  echo "pipx-version=$(pipx --version)" >> $GITHUB_OUTPUT
                  echo "PIPX_HOME=${PIPX_CACHE}${PATH_SEP}home" >> $GITHUB_ENV
                  echo "PIPX_BIN_DIR=${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_ENV
                  echo "PIPX_MAN_DIR=${PIPX_CACHE}${PATH_SEP}man" >> $GITHUB_ENV
                  echo "${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_PATH

            - name: Cache Pipx
              id: cache-pipx
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pipx-env-setup.outputs.pipx-cache-path }}
                  key: ${{ runner.os }}-python_${{ env.PYTHON_VERSION }}-pipx_${{ steps.pipx-env-setup.outputs.pipx-version }}-poetry_${{ env.POETRY_VERSION }}

            - name: Install Poetry & Tox
              if: steps.cache-pipx.outputs.cache-hit != 'true'
              run: |
                  pipx install poetry==${{ env.POETRY_VERSION }}

            - name: Setup Python ${{ env.PYTHON_VERSION }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: poetry

            - name: Install poetry Dependencies
              run: poetry install

            - name: Check mypy
              if: always()
              run: |
                  poetry run mypy

            - name: Check Ruff (Lint)
              if: always()
              run: |
                  poetry run ruff check

            - name: Check Ruff (Format)
              if: always()
              run: |
                  poetry run ruff format
