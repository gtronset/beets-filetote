# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Release

permissions:
    contents: write

on:
    workflow_dispatch:

env:
    POETRY_VERSION: 1.8.5
    PYTHON_VERSION: 3.13

jobs:
    release:
        name: Release

        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pipx environment Variables
              id: pipx-env-setup
              run: |
                  PATH_SEP="${{ !startsWith(runner.os, 'windows') && '/' || '\\' }}"
                  echo "PATH_SEP=${PATH_SEP}" >> $GITHUB_ENV

                  PIPX_CACHE="${{ github.workspace }}${PATH_SEP}pipx_cache"
                  echo "pipx-cache-path=${PIPX_CACHE}" >> $GITHUB_OUTPUT
                  echo "pipx-version=$(pipx --version)" >> $GITHUB_OUTPUT
                  echo "PIPX_HOME=${PIPX_CACHE}${PATH_SEP}home" >> $GITHUB_ENV
                  echo "PIPX_BIN_DIR=${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_ENV
                  echo "PIPX_MAN_DIR=${PIPX_CACHE}${PATH_SEP}man" >> $GITHUB_ENV
                  echo "${PIPX_CACHE}${PATH_SEP}bin" >> $GITHUB_PATH

            - name: Cache Pipx
              id: cache-pipx
              uses: actions/cache@v4
              with:
                  path: ${{ steps.pipx-env-setup.outputs.pipx-cache-path }}
                  key: ${{ runner.os }}-python_${{ env.PYTHON_VERSION }}-pipx_${{ steps.pipx-env-setup.outputs.pipx-version }}-poetry_${{ env.POETRY_VERSION }}

            - name: Install Poetry & Tox
              if: steps.cache-pipx.outputs.cache-hit != 'true'
              run: |
                  pipx install poetry==${{ env.POETRY_VERSION }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: poetry

            - name: Set Poetry to use TestPyPi to allow building against the test env
              if: ${{ github.event.act }}
              run: |
                  poetry config repositories.test-pypi https://test.pypi.org/legacy/
                  poetry config pypi-token.test-pypi ${{ secrets.PYPI_TOKEN }}
                  echo "POETRY_REPO=-r test-pypi" >> $GITHUB_ENV

            - name: Build project for distribution
              run: poetry build

            - name: Tag Name
              id: tag-name
              uses: SebRollen/toml-action@v1.2.0
              with:
                  file: "pyproject.toml"
                  field: "tool.poetry.version"

            - name: Check Version
              id: check-version
              run: |
                  [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT

            - name: Create Release
              if: ${{ !github.event.act }}
              uses: ncipollo/release-action@v1
              with:
                  artifacts: "dist/*"
                  token: ${{ secrets.GITHUB_TOKEN }}
                  tag: "v${{ steps.tag-name.outputs.value }}"
                  draft: false
                  generateReleaseNotes: true
                  prerelease: steps.check-version.outputs.prerelease == 'true'

            - name: Publish to PyPI
              env:
                  POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
              run: poetry publish ${{ env.POETRY_REPO }}
